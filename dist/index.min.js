#! /usr/bin/env node
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var args,fs=require("fs"),readline=require("readline"),argparse_1=require("argparse"),SwaggerDataGen_1=require("./src/SwaggerDataGen"),INPUT_ARG="swagger-input",OUTPUT_ARG="json-output",parser=new argparse_1.ArgumentParser({addHelp:!0,description:"Swagger Data Generator generates mock data from Swagger files."});function saveOutput(r){var t=readline.createInterface({input:process.stdin,output:process.stdout});function a(e){e?fs.writeSync(fs.openSync(args["json-output"],"w"),JSON.stringify(r,null,"\t")):t.write("...Aborting\n"),t.close(),process.stdin.pause()}args["force-yes"]?a(!0):t.question("content in "+args["json-output"]+" will be overwritten. continue? (y or n): ",function(e){a("y"===e||"Y"===e)})}parser.addArgument(["-y"],{help:"Always overwrite output file (do not ask to overwrite)",action:"storeTrue",dest:"force-yes"}),parser.addArgument([INPUT_ARG],{help:"Input Swagger file"}),parser.addArgument([OUTPUT_ARG],{help:"Output file for generated mock data"}),args=parser.parseArgs(),SwaggerDataGen_1.build(args[INPUT_ARG]).then(function(e){return saveOutput(SwaggerDataGen_1.generate(e))});